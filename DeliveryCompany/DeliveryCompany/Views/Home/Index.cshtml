@using Constants.Authentification
@using Models.Authentification
@using Models.ViewModels
@using Microsoft.AspNetCore.Identity
@model HomePageVM;
@{
	ViewData["Title"] = "Home Page";
}

<div class="container">
	<div id="loading-indicator" style="display:none">
		@await Html.PartialAsync("_Loading");
	</div>
	<h1>Delivery Company SMA</h1>

	<div class="row  mt-5">
		@if (!User.IsInRole(UserRoles.Admin))
		{
			<div class="col-md-6">
				<p style="font-size:18px">@Model.PageDescriptions.Description</p>
			</div>
		}
		else
		{
			<div class="col-md-6">
				<textarea id="descriptionTextArea" class="form-control" rows="8" cols="50">@Model.PageDescriptions.Description</textarea>
				<button id="saveButtonDescription" class="btn btn-primary mt-3">Save</button>
			</div>
		}
		<div class="col-md-6">
			<img src="~/assets/OIG3-fD_uZWi2S-transformed.jpeg" alt="Company Image" style="border-radius: 50%; width: 80%;">
		</div>
	</div>

	<div class="row mt-5">
		@if (User.IsInRole(UserRoles.Admin))
		{
			<div class="col-md-12 mt-3 mb-2" id="newCityFields">
				<h2>Add New City</h2>
				<button type="button" class="btn btn-primary" onclick="toggleNewCity()">Add New City</button>
			</div>
		}
		@if (Model.Cities.Count != 0)
		{
			<div class="col-md-12">
				<h2>Cities we deliver in</h2>
				<table class="table">
					<thead>
						<tr>
							<th>ID</th>
							<th>Name</th>
							@if (User.IsInRole(UserRoles.Admin))
							{
								<th></th>
							}
						</tr>
					</thead>
					<tbody>
						@foreach (var city in Model.Cities)
						{
							<tr>
								<td>@city.CityId</td>
								<td>@city.Name</td>
								@if (User.IsInRole(UserRoles.Admin))
								{
									<td>
										<a href="#" class="btn btn-danger mx-1 delete-btn" data-id="@city.CityId">
											<i class="bi bi-trash-fill"></i>
										</a>
									</td>
								}
							</tr>
						}
					</tbody>
				</table>
			</div>
		}
		else
		{
			<p>No Data to display!</p>
		}
	</div>
</div>

<div class="modal fade" id="confirmationModalPopup" tabindex="-1" aria-labelledby="confirmationModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="confirmationModalLabel">Confirm Action</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				Are you sure you want to delete this city?
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
				<button type="button" class="btn btn-danger" id="confirmDelete">Delete</button>
			</div>
		</div>
	</div>
</div>

@section Scripts {
	<script>
		document.getElementById("saveButtonDescription").addEventListener("click", function () {
			var newDescription = document.getElementById("descriptionTextArea").value;

			var pageDescription = {
				Description: newDescription,
				PageDescriptionsId: @Model.PageDescriptions.PageDescriptionsId
										};


			fetch('/Home/UpdateHomeDescription', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json'
				},
				body: JSON.stringify(pageDescription)
			})
				.then(response => {
					if (response.ok) {

						console.log('addNewCity called successfully.');
					} else {

						console.error('Failed to call addNewCity.');
					}
				})
				.catch(error => {

					console.error('Error fetching data:', error);
				});
		});
	</script>
	<script>
		function toggleNewCity() {
			var newCityFields = $('#newCityFields .new-city-fields');
			var addNewCityBtn = $('#newCityFields button');

			if (newCityFields.length === 0) {
				// Add new city fields
				var newCityField = `
													<div class="new-city-fields">
														<div class="form-group mt-2">
															<label for="newCityName">City Name</label>
															<input type="text" class="form-control" id="newCityName" />
																	<small id="cityNameValidation" class="text-danger"></small>
														</div>
																<button type="button" class="btn btn-primary mt-2" onclick="addNewCity()">Add New City</button>
													</div>
												`;
				$('#newCityFields').append(newCityField);
				addNewCityBtn.text('Cancel');
			} else {
				// Remove new city fields
				newCityFields.remove();
				addNewCityBtn.text('Add New City');
			}
		}
	</script>

	<script>
		function addNewCity() {
			var newCityName = document.getElementById("newCityName").value;

			var cityNameValidation = document.getElementById("cityNameValidation");

			if (newCityName.trim() === "") {
				cityNameValidation.textContent = "Please enter a city name.";
				return;
			} else {
				cityNameValidation.textContent = "";
			}
			fetch('/Home/AddNewCity', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json'
				},
				body: JSON.stringify(newCityName)
			})
				.then(response => {
					if (response.ok) {
						console.log('addNewCity called successfully.');
						window.location.reload();
					} else {
						console.error('Failed to call addNewCity.');
					}
				})
				.catch(error => {
					console.error('Error fetching data:', error);
				});
		}

	</script>

	<script>
		function showLoadingIndicator() {
			$('#loading-indicator').show();
		}

		function hideLoadingIndicator() {
			$('#loading-indicator').hide();
		}

		$(document).ready(function () {
			$('.delete-btn').click(function () {
			var cityId = $(this).data('id');
				console.log(cityId);
			$('#confirmationModalPopup').modal('show');
			$('#confirmDelete').click(function () {
				showLoadingIndicator();
				$.ajax({
					url: '@Url.Action("DeleteCity", "Home")',
					type: 'POST',
					data: { id: cityId },
					success: function () {
						location.reload();
					},
					error: function () {
					}
				});
			});
		});
						});
	</script>
}